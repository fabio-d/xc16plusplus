name: Continuous Integration
on: [push]

jobs:
  build-containers:
    name: Build Container
    runs-on: ubuntu-latest
    strategy:
      matrix: # NOTE: the same values must also be set in the wipe-containers job
        image-name: [linux-build, windows-build, osx-build, linux-test]
    steps:
      - name: Checkout Metadata
        uses: actions/checkout@v2

      - name: Setup Image Cache
        id: cache-image
        uses: actions/cache@v1
        with:
          path: docker-images
          key: docker-image-${{ matrix.image-name }}-${{ hashFiles(format('build-scripts/containers/{0}.Dockerfile', matrix.image-name)) }}

      - name: Build Image
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          build-scripts/build-container.sh ${{ matrix.image-name }}

          # Save to image to file
          mkdir docker-images
          docker save -o docker-images/docker-${{ matrix.image-name }}.tar xc16plusplus:${{ matrix.image-name }}

      - name: Propagate Image
        uses: actions/upload-artifact@v1
        with:
          name: docker-image-${{ matrix.image-name }}
          path: docker-images

  build-xc16plusplus:
    name: Build XC16++
    needs: [build-containers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [v1.00, v1.10, v1.11, v1.20, v1.21, v1.22, v1.23, v1.24, v1.25, v1.26, v1.30, v1.31, v1.32, v1.33, v1.34, v1.35, v1.36, v1.40, v1.41, v1.49, v1.50]
        target-os: [linux, windows, osx]
    steps:
      - name: Install Prerequisites
        run: sudo apt-get install -y dos2unix

      - name: Checkout Metadata
        uses: actions/checkout@v2

      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          repository: 'fabio-d/xc16plusplus-source'
          ref: xc16++-${{ matrix.version }}
          path: xc16plusplus-source

      - name: Receive "${{ matrix.target-os }}-build" Docker Image
        uses: actions/download-artifact@v1
        with:
          name: docker-image-${{ matrix.target-os }}-build
          path: docker-images

        # Only linux builds can be tested at the moment.
        # Version v1.49 cannot be tested because it only works with a "Functional Safety"
        # XC16 license.
      - name: Receive "${{ matrix.target-os }}-test" Docker Image
        uses: actions/download-artifact@v1
        if: matrix.target-os == 'linux' && matrix.version != 'v1.49'
        with:
          name: docker-image-${{ matrix.target-os }}-test
          path: docker-images

      - name: Load Docker Images
        run: |
          # Load the images produced by the previous job
          for IMAGE_FILE in docker-images/*;
          do
            docker load -i "$IMAGE_FILE"
          done

      - name: Build XC16++
        run: |
          export XC16PLUSPLUS_SOURCE_REPO="$PWD/xc16plusplus-source"
          build-scripts/build-targets.sh ${{ matrix.version }} ${{ matrix.target-os }}

      - name: Propagate Output
        uses: actions/upload-artifact@v2
        with:
          name: xc16plusplus-${{ matrix.version }}-${{ matrix.target-os }}
          path: build-scripts/build-${{ matrix.version }}/*.*

        # See comment above
      - name: Test XC16++
        if: matrix.target-os == 'linux' && matrix.version != 'v1.49'
        env:
          TESTPACK_TOKEN: ${{ secrets.TESTPACK_TOKEN }}
        run: |
          # Retrieve the preinstalled environment from a private location
          ${{ secrets.TESTPACK_RETR }} xc16-${{ matrix.version }}-${{ matrix.target-os }}.tar.xz

          # Run XC16++ and verify the results
          export XC16PLUSPLUS_SOURCE_REPO="$PWD/xc16plusplus-source"
          build-scripts/test-in-container.sh ${{ matrix.version }} ${{ matrix.target-os }} \
            xc16-${{ matrix.version }}-${{ matrix.target-os }}.tar.xz \
            build-scripts/build-${{ matrix.version }}/*.*

  wipe-containers:
    name: Wipe Containers
    runs-on: ubuntu-latest
    needs: [build-containers, build-xc16plusplus]
    if: always()
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        image-name: [linux-build, windows-build, osx-build, linux-test]
    steps:
      - name: Overwrite with an empty file to save space
        uses: actions/upload-artifact@v2
        with:
          name: docker-image-${{ matrix.image-name }}
          path: /dev/null
